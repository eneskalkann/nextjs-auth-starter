generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  role      String    @default("ADMIN")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("AdminProducts")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  createdAt     DateTime        @default(now())
  emailVerified DateTime?
  image         String?
  updatedAt     DateTime        @updatedAt
  password      String?
  accounts      Account[]
  Authenticator Authenticator[]
  orders        Order[]         @relation("UserOrders")
  sessions      Session[]
  savedProducts SavedProduct[]
  addresses     Address[]      @relation("UserAddresses")

}

model Account {
  userId            String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  description  String?
  slug         String         @unique
  isOnSale     Boolean        @default(false)
  price        Float
  fixed_price  Float?
  stock        Int
  isOnShopPage Boolean        @default(false)
  adminId      String
  orderItems   OrderItem[]
  admin        Admin          @relation("AdminProducts", fields: [adminId], references: [id], onDelete: Cascade)
  savedByUsers SavedProduct[]
  images       ProductImage[]
  categories   Category[]     @relation("ProductCategories")
  tags         Tag[]          @relation("ProductTags")
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  products  Product[] @relation("ProductCategories")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String?
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  products  Product[] @relation("ProductTags")
}

model Address {
  id          Int      @id @default(autoincrement())
  title       String   // e.g., "Ev Adresim", "İş Yerim"
  contactName String
  street      String
  city        String
  zipCode     String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  user      User     @relation("UserAddresses", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Order {
  id              String      @id
  userId          String
  totalPrice      Float
  paymentStatus   String
  iyzicoPaymentId String?
  customerName    String
  customerEmail   String
  customerPhone   String
  shippingAddress Json
  billingAddress  Json
  createdAt       DateTime    @default(now())
  user            User        @relation("UserOrders", fields: [userId], references: [id])
  items           OrderItem[]
  isNew           Boolean     @default(true)
  status          String      @default("processing")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   String
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model SavedProduct {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}